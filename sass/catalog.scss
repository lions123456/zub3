// благодяра gulp можно не запутаться в правилах. в sass создаются бэм файлы с именем класса, а gulpfile.js конвертирует и вставляет в папку css/style.css 
// чтобы это так работало, нужно подключить через @import в style.scss бэм файлы 
.catalog {
    background-image: url(../img/catalog.jpg);
    // установим свойства для селектора .catalog (для section который по симантике вместо div)
    // background-image = фон будет картинка
    background-repeat: no-repeat;
    // background-repeat = будет ли потворяться фон картинка, no-repeat щначит не будет
    background-position: left top;
    // в какой части будет находиться фон картинка, значит сверху слева
    padding-top: 220px;
    // padding-top = отступ сверху 
    // padding написал потому что есть некоторые правила (по макету нужен margin, а симентически нужно поставить padding)
    // 1. Отступы между соседними элементами: Если верхний или нижний отступ одного элемента идет непосредственно под или над отступом другого элемента, они могут сливаться в один больший отступ.
    // 2. Отступы у родителя и его потомков: Если у элемента есть отступы и его дочерние элементы тоже имеют отступы, они могут сливаться вместе.
    // 3. Отступы у пустых элементов: У некоторых элементов, особенно если они пусты или не имеют внутреннего контента, могут быть особенности в расчете отступов.
    padding-bottom: 116px;
    // отступ от самого низа страницы до карточки по сетке figma
    &__title {
    // селектор класса catalog__title, не блок title
        margin-bottom: 110px;
    }
    // все свойства, которые об установки высоты, ширины, оступы добавляются в элементы блока, чтобы блок можно реиспользовать

    &__list {
    // вложенный класс list (он вложен в .catalog)
        @include clear-list;
        // mixin - шаблон со свойствами для реиспользования
        // чтобы вставить миксин нужно в качестве свойства использовать: @ibclude clear-list
        display: flex;
        // https://doka.guide/css/flexbox-guide/
        // кратко : поведение элементов в блоке элементов по вертикале и горизонтале (прижиматься ли им друг к другу?, все время как "vs code/текстовый документ" добавлять объекты в длину и не переносить?)
        // - объектам например <li> здается условие добавляться...
        // display расположение объектов
        justify-content: center;
        // расстановка карточек по центру, чтобы и оставшиеся последние карточки были по центру
        flex-wrap: wrap;
        // - ... добавляться слева направо и будет все переносится с новой строки ( продолжение) если не хватит место
// align-items: flex-start;
// позициаонирование карточки во flex - только растянуть для одной многозначной (Loren20)
// display: grid;
// grid нужен для сложных решений со списком, например одна позиция (картинка - ссылка) больше, другие меньше
        
        column-gap: 45px;
        // в макете есть пространство между карточками. это пространство добалвяет расстояние по вертикале между карточками 
        row-gap: 45px;
        // эта по горизонтали
        // значит весь <ul> по вертикале и по горизонтали имеет отступы 45px
    }

    &__item {
        max-width: 340px;
        // ширина карточки 340px
        // каждая карточка мусса имеет 100% своей ширины (имеет 100% своей ширины 340px)
        // прописать в .* border - size, потому что если блок элемента в F12 не совпадает размеру, поттому что он еще к width: 340 прибавляет padding: 25, если бы была height; border, то прибавил бы еще их
    }
}